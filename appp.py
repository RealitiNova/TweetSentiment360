{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "816e6ea2-eb7e-4fa6-b89d-80f498d88747",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>clean_text</th>\n",
       "      <th>category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>when modi promised “minimum government maximum...</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>talk all the nonsense and continue all the dra...</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>what did just say vote for modi  welcome bjp t...</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>asking his supporters prefix chowkidar their n...</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>answer who among these the most powerful world...</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          clean_text  category\n",
       "0  when modi promised “minimum government maximum...      -1.0\n",
       "1  talk all the nonsense and continue all the dra...       0.0\n",
       "2  what did just say vote for modi  welcome bjp t...       1.0\n",
       "3  asking his supporters prefix chowkidar their n...       1.0\n",
       "4  answer who among these the most powerful world...       1.0"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv ('Twitter_sets.csv' )\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bec758f5-152a-47d3-9c97-0369f7b63f26",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing Values:\n",
      "clean_text    4\n",
      "category      7\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "tweets_data = pd.read_csv ('Twitter_sets.csv' )\n",
    "missing_values = tweets_data.isnull().sum()\n",
    "print(\"Missing Values:\")\n",
    "print(missing_values)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e5183be0-81d3-483b-895a-d4d525bb8679",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "First 5 Rows of the Dataset:\n",
      "                                          clean_text  category\n",
      "0  when modi promised “minimum government maximum...      -1.0\n",
      "1  talk all the nonsense and continue all the dra...       0.0\n",
      "2  what did just say vote for modi  welcome bjp t...       1.0\n",
      "3  asking his supporters prefix chowkidar their n...       1.0\n",
      "4  answer who among these the most powerful world...       1.0\n"
     ]
    }
   ],
   "source": [
    "print(\"\\nFirst 5 Rows of the Dataset:\")\n",
    "print(tweets_data.head())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9b91a338-602e-4b0c-9449-677d818ac177",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Class Distribution:\n",
      "category\n",
      " 1.0    72250\n",
      " 0.0    55213\n",
      "-1.0    35510\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "class_distribution = tweets_data['category'].value_counts()\n",
    "print(\"\\nClass Distribution:\")\n",
    "print(class_distribution)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "013ac8f8-3cbf-4c93-a09e-1c6e5b0ebbf1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\pauline\\AppData\\Local\\Temp\\ipykernel_23228\\2351570534.py:4: FutureWarning: \n",
      "\n",
      "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
      "\n",
      "  sns.countplot(x='category', data=tweets_data, palette='viridis')\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAsoAAAHYCAYAAABUYM5NAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjkuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8hTgPZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABdtklEQVR4nO3df3yO9f////tpP077eZrNNsuwSouQH9WMipCRoeRFzWsRSSlLkZLKElMq9MoryauPH6GphEqWH0nJz5Re+ZEU5deGmA3NNtvz+0dfx9tpB4ZxTq/b9XI5L6/XeRyP4zgex+E82n3PHedxOIwxRgAAAADcVPB0AwAAAEB5RFAGAAAAbBCUAQAAABsEZQAAAMAGQRkAAACwQVAGAAAAbBCUAQAAABsEZQAAAMAGQRkAAACwQVAG/sekpqbK4XDoyy+/9HQrF13NmjVVs2ZNj2zb7jj/9ttvcjgc6tmzp0d6kqQWLVrI4XB4bPtlYfr06WrQoIECAwPlcDiUmprq6ZbKVM+ePeVwOPTbb795uhXgfx5BGfgbWLdunXr37q1atWopICBAfn5+uuqqq5ScnKxFixZ5ur0LciLYnXj5+PgoNDRUDRo0UO/evZWRkaHi4uIy3+6UKVPkcDg0ZcqUMl/3xfR3/0VoxYoVSk5O1p9//qlHHnlEw4YNU4sWLc64jDFG06dPV8uWLRUaGipfX19FRESoYcOG6tevn5YtW3Zpmv//Xa6frdIqD78QAmXF29MNADh/xcXFGjRokMaOHStvb2+1bNlSHTt2lI+Pj7Zt26b58+dr+vTpGj58uJ577jlPt3tBBg4cqMDAQBUXF+vQoUPavHmzZsyYof/3//6fmjZtqvfee0/Vq1d3W2bJkiUe6lZ69NFHdc8995ToydOmTZumP//809NtnLfPPvtM0l/70aRJk1It06tXL02ZMkUhISFKTExUVFSU/vjjD/3888965513lJubq+bNm1/Mts/JqFGj9PTTT+uKK67wdCvA/zyCMnAZe/bZZzV27Fg1aNBAH374oa666iq3+Xl5eRo/frwOHDjgoQ7LzqBBgxQZGek2bf/+/UpJSVF6eroSEhL07bffKiAgwJp/6vG4lMLCwhQWFuax7Z9OeQvu52rPnj2SVOKzcDpff/21pkyZogYNGmjZsmUKDg52m3/o0CFt2rSpzPu8EFWrVlXVqlU93QYASTIALktbt241Xl5eJjQ01GRlZZ2x9tixY9b/HzZsmJFkli5d6lbzzjvvmI4dO5oaNWoYp9NpQkJCTJs2bcwXX3xhu84PP/zQ3HrrraZKlSrG6XSaatWqmYSEBDNnzhy3ui+++MK0bdvWVK1a1fj6+pqqVaua5s2bm0mTJpVqP5s3b24kmczMTNv5RUVFplWrVkaSefnll93m1ahRw9SoUcNtWl5ennn11VdN/fr1TXBwsAkICDBXXnmlueeee8x///tfY4wxPXr0MJJsX6f2dezYMfPcc8+Zq666ynh7e5thw4YZY+yP8/bt240k06NHD/Pjjz+atm3bmuDgYBMUFGQSExPNxo0bS+yf3T6c2sOp7099nbz8qcucUFhYaMaMGWPq169vKlasaIKDg02LFi3Mp59+WqJ28uTJRpKZPHmyWbx4sWnWrJnx9/c3lStXNvfdd5/5448/bPs9nW+++cbccccdJiQkxDidThMbG2uGDRtmjh49atUsXbr0rP8mdl5++WUjyYwdO/acesrPzzevvfaaadiwofH39zeBgYHm5ptvNvPmzStRe+Lzsn37dvPvf//bXHvttcbpdJrq1aub1NRUU1RUVKL2TPtx8vpO3f9hw4aZb775xrRo0cIEBgaasLAw8/DDD5s///zTGGPMggULTNOmTY2/v78JDw83gwcPNsePH7fdx7lz55qWLVuaSpUqGafTaa677jrzyiuvlKg/l3/vE7V2rxPnQmnOQaC8YEQZuExNmTJFRUVF6tu3ryIiIs5Y63Q6z7q+Rx55RNdff71at26tKlWqaPfu3Zo7d65at26tjz76SJ06dbJqJ0yYoH79+qlq1aq66667FBoaqszMTK1Zs0Zz587VnXfeKUmaP3++OnTooEqVKqlTp06qWrWq9u/fr/Xr12vGjBl64IEHLugYSFKFChU0dOhQLVmyRLNmzdLgwYPPWN+jRw+9//77ql+/vu6//345nU7t2LFDS5cuVUJCgurVq6c777xThw4d0rx589SpUyc1aNDgtOvr3LmzfvjhByUkJKhy5cq68sorz9rztm3b1KxZM910003q16+ftm7dqjlz5mj58uVasWKFateufa6HQZKsa0KXLVumHj16WF9krFSp0hmXM8aoW7du+uijj3TNNdfokUce0dGjR/X+++8rMTFRr7/+ulJSUkos98knn+jTTz9Vhw4d9PDDD+urr77StGnT9Ouvv2r58uWl6nn27Nm655575Ovrq27duik8PFyLFy/WCy+8oIULF2rp0qVyOp2qWbOmhg0bprlz5+qHH37QY489dtb9kqTKlStLkn755ZdS9SNJ+fn5atu2rb788ks1bNhQvXv3VmFhoebPn69OnTrpjTfe0KOPPlpiuSeffFJffvmlEhMT1aZNG82dO1epqakqKCjQyJEjJemcPlt2Vq9erZdfflkJCQnq27evli5dqgkTJig3N1edOnVSjx491LFjR8XFxWn+/PkaPXq0goODNXToULf1PPPMMxo1apSqVaumu+++W8HBwfrqq6/05JNPavXq1frggw9KbLs0/94NGjTQY489ptdff13XX3+99d8CSdbnsTTnIFBueDqpAzg/LVq0MJLM4sWLz2m5040ob9u2rUTtnj17TFRUlKlVq5bb9EaNGhlfX1+zb9++EsucPLrUuXNnI8n88MMPZ6w7k7ONKBvz14i5j4+PqVChgiksLLSmnzoae+jQIeNwOMwNN9xQYtTs+PHjJjs723p/8ijamfpq0KCBOXDgQIn5ZxpRlmSeffZZt/qpU6caSaZly5Zu089lRPl02z3bMtOmTTOSTPPmzU1+fr41fefOnSY8PNz4+Pi4fT5OHBtvb2+zfPlya/rx48etz+XKlSttt3+y3NxcazTz5M9IcXGxSUpKMpLMiy++6LaM3WjrmezYscMEBQWZChUqmPvuu8/MmTPH7Nix44zLPPPMM0aSSU1NNcXFxW793nDDDcbX19fs3r27RE8xMTFmz5491vT9+/ebSpUqmaCgILfjerbP1plGlCWZuXPnWtMLCgpM/fr1jcPhMGFhYWbNmjVu/YaHh5vQ0FC382LhwoVGkmnXrp3bqH1xcbF56KGHjCTz4Ycflui3tP/eJ//l5FTncg4C5QF3vQAuU1lZWZKkatWqlcn6YmJiSkyrWrWq7r77bm3dulW///672zwfHx/5+PiUWCY0NLTEND8/v1LVnS+n06nKlSuruLhYBw8ePG2dw+GQMUZOp1NeXl5u87y8vEo1QnmqF154wRq1LK2QkBA9/fTTbtOSk5NVt25dffHFF9q5c+c593EhTtx9YfTo0fL19bWmV6tWTY8//rgKCws1Y8aMEsslJSWpWbNm1nsvLy/16NFDkrR27dqz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rVs36+lvAwcO1I4dO9SiRQvVrFlTDodDy5cv15o1a9S0aVO3b9Cfzauvvmo9wjo3N1ebNm3SV199pfz8fDVr1kzp6elnvbZx9+7diouL03XXXadGjRrpiiuu0IEDBzRv3jwVFha63YM5Pj5efn5+GjdunHJzc1WlShVJKnG3ivNxyy236F//+pdWrVqlG2+8UT///LPmzJkjl8tl3ZHghEcffVSTJ0/WAw88oEWLFqlKlSr6+uuvdejQIV1//fX64Ycf3Opvu+02ORwODR06VD/99JNcLpdcLtcZf4lITk7WRx99pHnz5ql+/fpKTEy07qN84MABvfbaa6W6P/S5Cg4O1qRJk3TvvfcqLi5O3bp1U5UqVbRkyRJ9++23uummm/Tkk09e0DZ++uknPf744woLC9Ott96qq666SsYY/fLLL/rss89UUFCghx9+WHFxcdYyL7zwgr777jv961//0vz589W8eXPr3uI//vijfvjhB61cufK8v5R6MT9bpdG2bVs999xzevHFF3X11Verbdu2qlGjhg4cOKBffvlFX3/9tUaMGHHe9/MODAzUjTfeqK+++kr333+/atWqpQoVKigpKUkHDx4s9TkIlAuX9GZ0AC6KtWvXml69epmrr77a+Pn5GafTaWrWrGnuvfdes3DhQrfa091nd+nSpaZZs2YmKCjIVKpUydxxxx1m3bp1tvVvvvmm9RS/ihUrmtDQUBMXF2cmTpzodr/W9PR007VrV3PVVVcZf39/43K5TIMGDczo0aPNkSNHSrVvpz5tztvb24SEhJjrr7/e9OrVy2RkZLg9+exkp96DODs726Smpppbb73VelJgVFSUadu2rfn8889LLD9//nxz4403Gj8/v9M+me90zvZkvv/+97+mbdu2JigoyAQGBpr27dubDRs22K5ryZIlJi4uzjidThMaGmqSk5NNVlbWaXuYMmWKqVevnnE6nef0ZL5XX33VWi4oKMg0b97c9kl0Z7oP8MlPkCutr776yrRr185UqlTJ+Pr6mmuuucY899xztp+Rc72P8r59+8ykSZNMly5dTGxsrAkKCjI+Pj6matWqJjEx0e1+wSc7fvy4mThxomnWrJkJDg62nrTXtm1bM2HCBLfeztTT6c63M322zvZkvlOd6d/jTPfVXrRokenQoYOpUqWK8fHxMZGRkSY+Pt68+OKLbvea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vILyl19+aTv9559/VqdOnTRs2LAL6QkAAADwuPN64MjpXHPNNXryySc1ePDgslwtAAAAcMmVaVCWpJo1a2rDhg1lvVoAAADgkirzoDx79mxFRUWV9WoBAACAS+q8rlHu1atXiWn5+fn673//q02bNllPxAMAAAAuV+cVlL/44osSd72oWLGiatasqSFDhlhPzQMAAAAuV+cVlH/77bcybgMAAAAoX8r8GmUAAADg7+C8RpQl6eDBgxo7dqyWLFmiAwcOKCwsTK1bt9aAAQMUEhJSlj0CAAAAl9x5jSjv3r1bjRo10siRI5WTk6Pq1avr0KFDevHFF9WoUSPt2bOnrPsEAAAALqnzCsrPPPOM8vLytHr1am3cuFGLFi3Sxo0btXr1auXl5emZZ54p6z4BAACAS+q8gnJGRoZGjBihG2+80W36jTfeqOHDh2vBggVl0hwAAADgKecVlHNyclSzZk3beTExMcrJybmQngAAAACPO6+gHBMTo/nz59vOW7BggWJiYi6oKQAAAMDTzuuuF/fff7+efvppFRcXq0ePHqpataoyMzM1ffp0vfHGG3rppZfKus//aW26Dfd0C0AJC2c97+kWAAC4qM4rKD/55JP69ddfNX78eP373/+2phtj9OCDD2rQoEFl1iAAAADgCecVlB0OhyZOnKgnnnhCS5cu1YEDBxQaGqqWLVvqmmuuKeseAQAAgEuu1NcoZ2dn6+6779ann35qTYuNjdVDDz2koUOH6qGHHtLPP/+su+++WwcOHLgozQIAAACXSqmD8n/+8x/98MMPatu27Wlr2rZtqx9//NHtcgwAAADgclTqoJyenq4+ffrI2/v0V2t4e3urT58++vjjj8ukOQAAAMBTSh2Uf/75Z91www1nrWvUqJF+/vnnC2oKAAAA8LRSB+Xjx4/Lx8fnrHU+Pj4qLCy8oKYAAAAATyt1UK5atao2bdp01rqNGzcqMjLygpoCAAAAPK3UQbl58+Z68803zzhaXFhYqAkTJui2224rk+YAAAAATyl1UH788cf1008/6a677tKePXtKzN+zZ4/uvPNObdmyRY8//niZNgkAAABcaqV+4Ej9+vX173//W/369VNMTIwaN26smJgYSdL27du1bt06FRcXa8KECapXr95FaxgAAAC4FM7pyXx9+vRR3bp1lZaWpqVLl2rVqlWSJH9/f7Vt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x623wsJChYWFafLkyZL+em786NGjdeWVV8rPz0/XX3+9PvzwwzI4UsDZlcX55HA4NHfuXLdlKlWqpClTpkiSYmJiJEkNGzaUw+FQixYtJP01MnfnnXdq1KhRioqK0jXXXCNJmj59um644QYFBQUpMjJSSUlJ2rdvX9ntNHCBnE6nIiMjFR0draSkJHXv3l1z585Vfn6+UlJSFB4erooVK+rmm2/W2rVrreWys7PVvXt3ValSRX5+fqpVq5b1s+Dkv7z89ttvuu222yRJISEhcjgc6tmzpyT3Sy+GDBmiJk2alOivfv36GjZsmPV+8uTJql27tipWrKhrr71Wb7755kU6MjiBoAyP8fLyUlpamt544w3t2rWrxPwff/xRCQkJ6ty5s/773/9q1qxZWr58uR599FGr5r777tOePXv05Zdfavbs2Xr77bdL/CCuUKGC/vWvf2nDhg2aOnWqvvjiCw0ePFiS1LRpU40bN07BwcHKzMxUZmam7WhC9+7d9fHHH1sBW5I+//xzHT16VHfffbck6dlnn9XkyZM1YcIEbdy4UY8//rj++c9/atmyZWVyvIAzKYvz6WzWrFkjSVq8eLEyMzP10UcfWfOWLFmizZs3a9GiRfr0008l/TWy/OKLL+qHH37Q3LlztX37diskAOWRn5+fCgsLNXjwYM2ePVtTp07Vd999p6uvvloJCQk6ePCgJOm5557Tpk2btGDBAm3evFkTJkxQWFhYifVFR0dr9uzZkqQtW7YoMzNTr7/+eom67t27a/Xq1fr111+taRs3btSPP/6o7t27S5ImTZqkoUOHauTIkdq8ebPS0tL03HPPaerUqRfjUOAEA3hAjx49TKdOnYwxxjRp0sT06tXLGGPMnDlzzImPZXJysnnwwQfdlvv6669NhQoVTF5entm8ebORZNauXWvN37p1q5Fkxo4de9ptv//++yY0NNR6P3nyZONyuUrU1ahRw1pPQUGBCQsLM9OmTbPm33vvveYf//iHMcaYI0eOmIoVK5oVK1a4raN3797m3nvvPfPBAC5QWZxPxhgjycyZM8etxuVymcmTJxtjjNm+fbuRZL7//vsS24+IiDD5+fln7HPNmjVGkjl8+LAxxpilS5caSSY7O/sc9xi4cCefN8YYs3r1ahMaGmq6dOlifHx8zIwZM6x5BQUFJioqyowePdoYY0yHDh3M/fffb7veU8+T033Omzdvbh577DHrff369c3w4cOt90OGDDE33nij9T46OtrMnDnTbR0vvviiiY+PP5fdxjliRBke9/LLL2vq1KnatGmT2/R169ZpypQpCgwMtF4JCQkqLi7W9u3btWXLFnl7e6tRo0bWMldffbVCQkLc1rN06VLdfvvtuuKKKxQUFKT77rtPBw4cOKcvbPj4+Ogf//iHZsyYIUk6evSo5s2bZ/2mv2nTJh07dky33367W7/Tpk1zGyEALrbzPZ8uVL169eTr6+s27fvvv1enTp1Uo0YNBQUFWZdq7Nix44K3B5SFTz/9VIGBgapYsaLi4+N16623qn///iosLFSzZs2sOh8fH910003avHmzJOnhhx9Wenq6GjRooMGDB2vFihUX3Ev37t2tnzHGGL333nvWz5j9+/dr586d6t27t9s5PGLECH7GXGRnvtIcuARuvfVWJSQk6JlnnnH7s2xxcbH69u2rlJSUEstUr15dW7ZssV2fOemp7L///rvuuOMOPfTQQ3rxxRdVuXJlLV++XL1791ZhYeE59dm9e3c1b95c+/bt06JFi1SxYkW1a9fO6lWS5s+fryuuuMJtOafTeU7bAS7E+Z5P0l/XKJ98/kgq9XkSEBDg9v7o0aNq06aN2rRpo+nTp6tKlSrasWOHEhIS+LIfyo3bbrtNEyZMkI+Pj6KiouTj46MffvhBkkrcMcYYY01r166dfv/9d82fP1+LFy9Wq1at9Mgjj+jVV189716SkpL09NNP67vvvlNeXp527txpfTfmxM+YSZMmKS4uzm05Ly+v894mzo6gjHLhpZdeUoMGDawvAUlSo0aNtHHjRl199dW2y1x77bU6fvy4vv/+ezVu3FiS9Msvv7jdgufbb7/V8ePH9dprr6lChb/+gPL++++7rcfX11dFRUVn7bFp06aKjo7WrFmztGDBAv3jH/+wRtDq1Kkjp9OpHTt2qHnz5ue070BZO5/zSfrrTi+ZmZnW+61bt+rPP/+03p/4vJfmfPnpp5/0xx9/6KWXXlJ0dLSkv85HoDwJCAgocU5cffXV8vX11fLly5WUlCTpr18Yv/32W7f7HlepUkU9e/ZUz549dcstt+jJJ5+0DcqlPW+qVaumW2+9VTNmzFBeXp5at26tiIgISVJERISuuOIKbdu2zRplxqVBUEa5UK9ePXXv3l1vvPGGNe2pp55SkyZN9Mgjj6hPnz4KCAiwviz0xhtv6Nprr1Xr1q314IMPWiMCAwcOlJ+fn/Vb/1VXXaXjx4/rjTfeUIcOHfTNN9/orbfectt2zZo1deTIES1ZskTXX3+9/P39bW8L53A4lJSUpLfeeks///yzli5das0LCgrSoEGD9Pjjj6u4uFg333yzcnNztWLFCgUGBqpHjx4X6cgBJZ3P+SRJLVu21Pjx49WkSRMVFxfrqaeeko+Pj7WO8PBw+fn5KSMjQ9WqVVPFihXlcrlse6hevbp8fX31xhtv6KGHHtKGDRu4ZywuCwEBAXr44Yf15JNPqnLlyqpevbpGjx6tP//8U71795YkPf/882rcuLGuu+465efn69NPP1Xt2rVt11ejRg05HA59+umnuuOOO+Tn56fAwEDb2u7duys1NVUFBQUaO3as27zU1FSlpKQoODhY7dq1U35+vr799ltlZ2friSeeKNuDgP/j2Uuk8b/q1C9RGGPMb7/9ZpxOpzn5Y7lmzRpz++23m8DAQBMQEGDq169vRo4cac3fs2ePadeunXE6naZGjRpm5syZJjw83Lz11ltWzZgxY0zVqlWNn5+fSUhIMNOmTSvxxYqHHnrIhIaGGklm2LBhxhj3L/OdsHHjRiPJ1KhRwxQXF7vNKy4uNq+//rqJjY01Pj4+pkqVKiYhIcEsW7bswg4WcBZldT7t3r3btGnTxgQEBJhatWqZzz77zO3LfMYYM2nSJBMdHW0qVKhgmjdvftrtG2PMzJkzTc2aNY3T6TTx8fHm448/LtWXnIBL4XSfW2OMycvLM/379zdhYWHG6XSaZs2amTVr1ljzX3zxRVO7dm3j5+dnKleubDp16mS2bdtmjLH/0uvw4cNNZGSkcTgcpkePHsaYkl/mM8aY7Oxs43Q6jb+/v/Wl15PNmDHDNGjQwPj6+pqQkBBz6623mo8++uiCjgPOzGHMKRekAZexXbt2KTo62rpmDAAA4HwRlHFZ++KLL3TkyBHVq1dPmZmZGjx4sHbv3q2ff/7Z7U/GAAAA54prlHFZKyws1DPPPKNt27YpKChITZs21YwZMwjJAADggjGiDAAAANjggSMAAACADYIyAAAAYIOgDAAAANggKAMAAAA2CMoAAACADYIygL+11atX66677lL16tXldDoVERGh+Ph4DRw48KJu988//1Rqaqq+/PLLEvOmTJkih8Oh33777aL2cKFmzpypcePGndMyxcXFevfdd9W6dWuFhYXJx8dH4eHhSkxM1CeffKLi4uJz7iMtLU1z58495+UA4EJxezgAf1vz589Xx44d1aJFC/Xp00dVq1ZVZmamvv32W6Wnp2vXrl0Xbdt//PGHqlSpomHDhik1NdVt3v79+/Xrr7+qYcOGcjqdF62HC5WYmKgNGzaUOtAfO3ZMd955pxYuXKh77rlHd911lyIjI7V//35lZGRo2rRpmjVrljp16nROfQQGBqpLly6aMmXKue8EAFwAHjgC4G9r9OjRiomJ0eeffy5v7//7z90999yj0aNHe6yvKlWqqEqVKh7b/sXyxBNP6PPPP9fUqVN13333uc3r3LmznnzySeXl5Xmou4vvzz//lL+/v6fbAFCGuPQCwN/WgQMHFBYW5haST6hQoeR//mbNmqX4+HgFBAQoMDBQCQkJ+v77791qevbsqcDAQP3yyy+64447FBgYqOjoaA0cOFD5+fmSpN9++80Kwi+88IIcDoccDod69uwpyf7SixYtWqhu3bpauXKlmjZtKj8/P9WsWVOTJ0+W9NfoeKNGjeTv76969eopIyOjRP9bt25VUlKSwsPD5XQ6Vbt2bf373/92q/nyyy/lcDj03nvvaejQoYqKilJwcLBat26tLVu2uPUzf/58/f7771b/DofjtMc6KytL//nPf5SQkFAiJJ9Qq1Yt1a9fX9Jfo88DBw5UgwYN5HK5VLlyZcXHx2vevHluyzgcDh09elRTp061emjRooXbdvv27atq1arJ19dXMTExeuGFF3T8+HG39ezatUtdunRRUFCQKlWqpO7du2vt2rVyOBwlRqo//vhjxcfHy9/fX0FBQbr99tu1cuVKt5rU1FQ5HA5999136tKli0JCQnTVVVfp3XfflcPhKFEvScOHD5ePj4/27Nlz2uMIoHwhKAP424qPj9fq1auVkpKi1atXq7Cw8LS1aWlpuvfee1WnTh29//77evfdd3X48GHdcsst2rRpk1ttYWGhOnbsqFatWmnevHnq1auXxo4dq5dfflmSVLVqVSvI9u7dWytXrtTKlSv13HPPnbHfrKws3X///XrggQc0b9481atXT7169dLw4cM1ZMgQDR48WLNnz1ZgYKDuvPNOt8C1adMm3XjjjdqwYYNee+01ffrpp2rfvr1SUlL0wgsvlNjWM888o99//13/+c9/9Pbbb2vr1q3q0KGDioqKJElvvvmmmjVrpsjISKt/u/B3wtKlS1VYWKg777zzjPt4Qn5+vg4ePKhBgwZp7ty5eu+993TzzTerc+fOmjZtmlW3cuVK+fn56Y477rB6ePPNN63jddNNN+nzzz/X888/rwULFqh3794aNWqU+vTpY63j6NGjuu2227R06VK9/PLLev/99xUREaFu3bqV6GvmzJnq1KmTgoOD9d577+mdd95Rdna2WrRooeXLl5eo79y5s66++mp98MEHeuutt9StWzdFRkaW+AXl+PHjmjhxou666y5FRUWV6hgBKAcMAPxN/fHHH+bmm282kowk4+PjY5o2bWpGjRplDh8+bNXt2LHDeHt7m/79+7stf/jwYRMZGWm6du1qTevRo4eRZN5//3232jvuuMPExsZa7/fv328kmWHDhpXoa/LkyUaS2b59uzWtefPmRpL59ttvrWkHDhwwXl5exs/Pz+zevduavn79eiPJ/Otf/7KmJSQkmGrVqpmcnBy3bT366KOmYsWK5uDBg8YYY5YuXWokmTvuuMOt7v333zeSzMqVK61p7du3NzVq1CjRv52XXnrJSDIZGRmlqj/V8ePHTWFhoendu7dp2LCh27yAgADTo0ePEsv07dvXBAYGmt9//91t+quvvmokmY0bNxpjjPn3v/9tJJkFCxaUWF6SmTx5sjHGmKKiIhMVFWXq1atnioqKrLrDhw+b8PBw07RpU2vasGHDjCTz/PPPl+hr2LBhxtfX1+zdu9eaNmvWLCPJLFu2rHQHBEC5wIgygL+t0NBQff3111q7dq1eeuklderUST///LOGDBmievXq6Y8//pAkff755zp+/Ljuu+8+HT9+3HpVrFhRzZs3L3HnCofDoQ4dOrhNq1+/vn7//fcL6rdq1apq3Lix9b5y5coKDw9XgwYN3EYha9euLUnW9o4dO6YlS5borrvukr+/v9s+3HHHHTp27JhWrVrltq2OHTuW6P/kdV4KH3zwgZo1a6bAwEB5e3vLx8dH77zzjjZv3lyq5T/99FPddtttioqKctvndu3aSZKWLVtm/W9QUJDatm3rtvy9997r9n7Lli3as2ePkpOT3S7NCQwM1N13361Vq1bpzz//dFvm7rvvLtHXww8/LEmaNGmSNW38+PGqV6+ebr311lLtG4DygaAM4G/vhhtu0FNPPaUPPvhAe/bs0eOPP67ffvvN+kLf3r17JUk33nijfHx83F6zZs2yAvUJ/v7+qlixots0p9OpY8eOXVCflStXLjHN19e3xHRfX19JsrZ34MABHT9+XG+88UaJ/u+44w5JKrEPoaGhJfqXdN5ftqtevbokafv27aWq/+ijj9S1a1ddccUVmj59ulauXKm1a9eqV69epT6Oe/fu1SeffFJin6+77jpJ/7fPBw4cUERERInlT5124MABSX/9wnKqqKgoFRcXKzs72226Xe2JyzomTpyooqIi/fe//9XXX3+tRx99tFT7BaD84K4XAP6n+Pj4aNiwYRo7dqw2bNggSQoLC5Mkffjhh6pRo4Yn2zsvISEh8vLyUnJysh555BHbmpiYmIvaw2233SYfHx/NnTtXDz300Fnrp0+frpiYGM2aNcvtS4InvhBZGmFhYapfv75GjhxpO//EKHxoaKjWrFlTYn5WVpbb+xO/PGRmZpao3bNnjypUqKCQkBC36af7guNjjz2md999V/PmzVNGRob1BUIAlxeCMoC/rczMTNsRvxN/2j8RpBISEuTt7a1ff/3V9k/p5+NCR2jPhb+/v2677TZ9//33ql+/vjXifKGcTmep+4+MjNQDDzygCRMmaNq0abZ3vvj111919OhR1a9fXw6HQ76+vm5BMysrq8RdL87UR2Jioj777DNdddVVJQLsyZo3b673339fCxYssC7LkKT09HS3utjYWF1xxRWaOXOmBg0aZPV29OhRzZ4927oTRmk0btxYTZs21csvv6wNGzbowQcfVEBAQKmWBVB+EJQB/G0lJCSoWrVq6tChg6699loVFxdr/fr1eu211xQYGKjHHntMklSzZk0NHz5cQ4cO1bZt29S2bVuFhIRo7969WrNmjQICAmzvHHEmQUFBqlGjhubNm6dWrVqpcuXKCgsLU82aNS/Cnkqvv/66br75Zt1yyy16+OGHVbNmTR0+fFi//PKLPvnkE33xxRfnvM569erpo48+0oQJE9S4cWNVqFBBN9xww2nrx4wZo23btqlnz576/PPPdddddykiIkJ//PGHFi1apMmTJys9PV3169dXYmKiPvroI/Xr109dunTRzp079eKLL6pq1araunVriT6+/PJLffLJJ6pataqCgoIUGxur4cOHa9GiRWratKlSUlIUGxurY8eO6bffftNnn32mt956S9WqVVOPHj00duxY/fOf/9SIESN09dVXa8GCBfr8888l/d+tAitUqKDRo0ere/fuSkxMVN++fZWfn69XXnlFhw4d0ksvvXROx++xxx5Tt27d5HA41K9fv3M8+gDKBU9/mxAALpZZs2aZpKQkU6tWLRMYGGh8fHxM9erVTXJystm0aVOJ+rlz55rbbrvNBAcHG6fTaWrUqGG6dOliFi9ebNX06NHDBAQElFj2xF0QTrZ48WLTsGFD43Q6jSTrzg2nu+vFddddV2K9NWrUMO3bty8xXZJ55JFH3KZt377d9OrVy1xxxRXGx8fHVKlSxTRt2tSMGDHCqjlx14sPPvigxLI66Q4Qxhhz8OBB06VLF1OpUiXjcDhK7J+d48ePm6lTp5qWLVuaypUrG29vb1OlShXTrl07M3PmTLe7Sbz00kumZs2axul0mtq1a5tJkybZHsf169ebZs2aGX9/fyPJNG/e3Jq3f/9+k5KSYmJiYoyPj4+pXLmyady4sRk6dKg5cuSIVbdjxw7TuXNnExgYaIKCgszdd99tPvvsMyPJzJs3z217c+fONXFxcaZixYomICDAtGrVynzzzTduNSf63L9//2mPRX5+vnE6naZt27ZnPW4AyiceYQ0A+J+UlpamZ599Vjt27FC1atXKfP2ffPKJOnbsqPnz51tfqgRweSEoAwD+9saPHy9Juvbaa1VYWKgvvvhC//rXv9StWze3B5yUhU2bNun333/XY489poCAAH333XdnfKohgPKLa5QBAH97/v7+Gjt2rH777Tfl5+erevXqeuqpp/Tss8+W+bb69eunb775Ro0aNbIevQ3g8sSIMgAAAGCDB44AAAAANgjKAAAAgA2CMgAAAGCDoAwAAADYICgDAAAANgjKAAAAgA2CMgAAAGCDoAwAAADY+P8AA5aJpd5kWZkAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "plt.figure(figsize=(8, 5))\n",
    "sns.countplot(x='category', data=tweets_data, palette='viridis')\n",
    "plt.title('Class Distribution of Sentiments', fontsize=14)\n",
    "plt.xlabel('Sentiment Category', fontsize=12)\n",
    "plt.ylabel('Count', fontsize=12)\n",
    "plt.xticks(ticks=[0, 1, 2], labels=['Negative', 'Neutral', 'Positive'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "209a4292-a3b7-45f1-bc98-2d6fa4e4b3a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.stem import WordNetLemmatizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e7e3aac6-68ee-44e4-b02a-dfa1dc1a6a27",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\pauline\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\pauline\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to\n",
      "[nltk_data]     C:\\Users\\pauline\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nltk.download('stopwords')\n",
    "nltk.download('punkt')\n",
    "nltk.download('wordnet')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "9afc3124-878f-4e5c-92de-a33efad01a2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "stop_words = set(stopwords.words('english'))  # English stopwords\n",
    "lemmatizer = WordNetLemmatizer()  # Lemmatizer for reducing words to base forms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d01f7a79-5f5a-4e02-a59f-99dec687f407",
   "metadata": {
    "jupyter": {
     "source_hidden": True
    }
   },
   "outputs": [],
   "source": [
    "def preprocess_text(text):\n",
    "    if isinstance(text, str):  # Ensure text is not NaN\n",
    "        # Tokenize the text\n",
    "        tokens = word_tokenize(text.lower())  # Convert to lowercase and tokenize\n",
    "        # Remove stopwords and non-alphanumeric tokens, and lemmatize\n",
    "        tokens = [lemmatizer.lemmatize(word) for word in tokens if word.isalnum() and word not in stop_words]\n",
    "        return ' '.join(tokens)  # Return cleaned text as a single string\n",
    "    return ''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "21c1a9a3-c6fd-4fb7-8b57-c5ec598b0967",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Preview of Processed Text Data:\n",
      "                                          clean_text  \\\n",
      "0  when modi promised “minimum government maximum...   \n",
      "1  talk all the nonsense and continue all the dra...   \n",
      "2  what did just say vote for modi  welcome bjp t...   \n",
      "3  asking his supporters prefix chowkidar their n...   \n",
      "4  answer who among these the most powerful world...   \n",
      "\n",
      "                                      processed_text  \n",
      "0  modi promised minimum government maximum gover...  \n",
      "1             talk nonsense continue drama vote modi  \n",
      "2  say vote modi welcome bjp told rahul main camp...  \n",
      "3  asking supporter prefix chowkidar name modi gr...  \n",
      "4  answer among powerful world leader today trump...  \n"
     ]
    }
   ],
   "source": [
    "tweets_data['processed_text'] = tweets_data['clean_text'].apply(preprocess_text)\n",
    "print(\"\\nPreview of Processed Text Data:\")\n",
    "print(tweets_data[['clean_text', 'processed_text']].head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "fe214c8d-11a4-4402-9f21-fef4dd3c4388",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     C:\\Users\\pauline\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package punkt to\n",
      "[nltk_data]     C:\\Users\\pauline\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package wordnet to\n",
      "[nltk_data]     C:\\Users\\pauline\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n",
      "[nltk_data] Downloading package omw-1.4 to\n",
      "[nltk_data]     C:\\Users\\pauline\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package omw-1.4 is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "\n",
    "nltk.download('stopwords')\n",
    "nltk.download('punkt')\n",
    "nltk.download('wordnet')\n",
    "nltk.download('omw-1.4')  # For lemmatization to work properly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d7c5c532-f336-4223-93bd-9e5641f120b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def preprocess_text(text):\n",
    "    if isinstance(text, str):  # Ensure text is not NaN\n",
    "        # Tokenize the text\n",
    "        tokens = word_tokenize(text.lower())  # Convert to lowercase and tokenize\n",
    "        # Remove stopwords and non-alphanumeric tokens, and lemmatize\n",
    "        tokens = [lemmatizer.lemmatize(word) for word in tokens if word.isalnum() and word not in stop_words]\n",
    "        return ' '.join(tokens)  # Return cleaned text as a single string\n",
    "    return ''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "3c28ac93-ee06-410e-b805-4d7ec1d5f834",
   "metadata": {},
   "outputs": [],
   "source": [
    "tweets_data['processed_text'] = tweets_data['clean_text'].apply(preprocess_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3ceb3508-8995-4bf1-a809-86e9afec44a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package punkt_tab to\n",
      "[nltk_data]     C:\\Users\\pauline\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package punkt_tab is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "  >>> import nltk\n",
    "  >>> nltk.download('punkt_tab')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "c3a0b726-b9d7-479f-8c69-e409b6d8e162",
   "metadata": {},
   "outputs": [],
   "source": [
    "tweets_data['processed_text'] = tweets_data['clean_text'].apply(preprocess_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b4985ec5-ab83-4852-a706-d535e813aa6b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Preview of Processed Text Data:\n",
      "                                          clean_text  \\\n",
      "0  when modi promised “minimum government maximum...   \n",
      "1  talk all the nonsense and continue all the dra...   \n",
      "2  what did just say vote for modi  welcome bjp t...   \n",
      "3  asking his supporters prefix chowkidar their n...   \n",
      "4  answer who among these the most powerful world...   \n",
      "\n",
      "                                      processed_text  \n",
      "0  modi promised minimum government maximum gover...  \n",
      "1             talk nonsense continue drama vote modi  \n",
      "2  say vote modi welcome bjp told rahul main camp...  \n",
      "3  asking supporter prefix chowkidar name modi gr...  \n",
      "4  answer among powerful world leader today trump...  \n"
     ]
    }
   ],
   "source": [
    "print(\"\\nPreview of Processed Text Data:\")\n",
    "print(tweets_data[['clean_text', 'processed_text']].head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "25427ba7-fc9b-47f2-8f40-ee56aa717dc9",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Input y contains NaN.",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[34], line 4\u001b[0m\n\u001b[0;32m      2\u001b[0m X \u001b[38;5;241m=\u001b[39m tweets_data[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mprocessed_text\u001b[39m\u001b[38;5;124m'\u001b[39m]  \u001b[38;5;66;03m# Processed text data\u001b[39;00m\n\u001b[0;32m      3\u001b[0m y \u001b[38;5;241m=\u001b[39m tweets_data[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcategory\u001b[39m\u001b[38;5;124m'\u001b[39m]  \u001b[38;5;66;03m# Sentiment category\u001b[39;00m\n\u001b[1;32m----> 4\u001b[0m X_train, X_test, y_train, y_test \u001b[38;5;241m=\u001b[39m train_test_split(\n\u001b[0;32m      5\u001b[0m     X, y, test_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.2\u001b[39m, random_state\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m42\u001b[39m, stratify\u001b[38;5;241m=\u001b[39my  \u001b[38;5;66;03m# Stratify ensures balanced classes\u001b[39;00m\n\u001b[0;32m      6\u001b[0m )\n\u001b[0;32m      7\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTraining set size: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(X_train)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m      8\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTesting set size: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(X_test)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\utils\\_param_validation.py:213\u001b[0m, in \u001b[0;36mvalidate_params.<locals>.decorator.<locals>.wrapper\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    207\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m    208\u001b[0m     \u001b[38;5;28;01mwith\u001b[39;00m config_context(\n\u001b[0;32m    209\u001b[0m         skip_parameter_validation\u001b[38;5;241m=\u001b[39m(\n\u001b[0;32m    210\u001b[0m             prefer_skip_nested_validation \u001b[38;5;129;01mor\u001b[39;00m global_skip_validation\n\u001b[0;32m    211\u001b[0m         )\n\u001b[0;32m    212\u001b[0m     ):\n\u001b[1;32m--> 213\u001b[0m         \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m    214\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m InvalidParameterError \u001b[38;5;28;01mas\u001b[39;00m e:\n\u001b[0;32m    215\u001b[0m     \u001b[38;5;66;03m# When the function is just a wrapper around an estimator, we allow\u001b[39;00m\n\u001b[0;32m    216\u001b[0m     \u001b[38;5;66;03m# the function to delegate validation to the estimator, but we replace\u001b[39;00m\n\u001b[0;32m    217\u001b[0m     \u001b[38;5;66;03m# the name of the estimator by the name of the function in the error\u001b[39;00m\n\u001b[0;32m    218\u001b[0m     \u001b[38;5;66;03m# message to avoid confusion.\u001b[39;00m\n\u001b[0;32m    219\u001b[0m     msg \u001b[38;5;241m=\u001b[39m re\u001b[38;5;241m.\u001b[39msub(\n\u001b[0;32m    220\u001b[0m         \u001b[38;5;124mr\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mparameter of \u001b[39m\u001b[38;5;124m\\\u001b[39m\u001b[38;5;124mw+ must be\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    221\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mparameter of \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mfunc\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__qualname__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m must be\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m    222\u001b[0m         \u001b[38;5;28mstr\u001b[39m(e),\n\u001b[0;32m    223\u001b[0m     )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\model_selection\\_split.py:2801\u001b[0m, in \u001b[0;36mtrain_test_split\u001b[1;34m(test_size, train_size, random_state, shuffle, stratify, *arrays)\u001b[0m\n\u001b[0;32m   2797\u001b[0m         CVClass \u001b[38;5;241m=\u001b[39m ShuffleSplit\n\u001b[0;32m   2799\u001b[0m     cv \u001b[38;5;241m=\u001b[39m CVClass(test_size\u001b[38;5;241m=\u001b[39mn_test, train_size\u001b[38;5;241m=\u001b[39mn_train, random_state\u001b[38;5;241m=\u001b[39mrandom_state)\n\u001b[1;32m-> 2801\u001b[0m     train, test \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mnext\u001b[39m(cv\u001b[38;5;241m.\u001b[39msplit(X\u001b[38;5;241m=\u001b[39marrays[\u001b[38;5;241m0\u001b[39m], y\u001b[38;5;241m=\u001b[39mstratify))\n\u001b[0;32m   2803\u001b[0m train, test \u001b[38;5;241m=\u001b[39m ensure_common_namespace_device(arrays[\u001b[38;5;241m0\u001b[39m], train, test)\n\u001b[0;32m   2805\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mlist\u001b[39m(\n\u001b[0;32m   2806\u001b[0m     chain\u001b[38;5;241m.\u001b[39mfrom_iterable(\n\u001b[0;32m   2807\u001b[0m         (_safe_indexing(a, train), _safe_indexing(a, test)) \u001b[38;5;28;01mfor\u001b[39;00m a \u001b[38;5;129;01min\u001b[39;00m arrays\n\u001b[0;32m   2808\u001b[0m     )\n\u001b[0;32m   2809\u001b[0m )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\model_selection\\_split.py:2334\u001b[0m, in \u001b[0;36mStratifiedShuffleSplit.split\u001b[1;34m(self, X, y, groups)\u001b[0m\n\u001b[0;32m   2329\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m groups \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   2330\u001b[0m     warnings\u001b[38;5;241m.\u001b[39mwarn(\n\u001b[0;32m   2331\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mThe groups parameter is ignored by \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__class__\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;18m__name__\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m   2332\u001b[0m         \u001b[38;5;167;01mUserWarning\u001b[39;00m,\n\u001b[0;32m   2333\u001b[0m     )\n\u001b[1;32m-> 2334\u001b[0m y \u001b[38;5;241m=\u001b[39m check_array(y, input_name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124my\u001b[39m\u001b[38;5;124m\"\u001b[39m, ensure_2d\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, dtype\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m)\n\u001b[0;32m   2335\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28msuper\u001b[39m()\u001b[38;5;241m.\u001b[39msplit(X, y, groups)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\utils\\validation.py:1064\u001b[0m, in \u001b[0;36mcheck_array\u001b[1;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_writeable, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[0;32m   1058\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[0;32m   1059\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mFound array with dim \u001b[39m\u001b[38;5;132;01m%d\u001b[39;00m\u001b[38;5;124m. \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m expected <= 2.\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m   1060\u001b[0m         \u001b[38;5;241m%\u001b[39m (array\u001b[38;5;241m.\u001b[39mndim, estimator_name)\n\u001b[0;32m   1061\u001b[0m     )\n\u001b[0;32m   1063\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m force_all_finite:\n\u001b[1;32m-> 1064\u001b[0m     _assert_all_finite(\n\u001b[0;32m   1065\u001b[0m         array,\n\u001b[0;32m   1066\u001b[0m         input_name\u001b[38;5;241m=\u001b[39minput_name,\n\u001b[0;32m   1067\u001b[0m         estimator_name\u001b[38;5;241m=\u001b[39mestimator_name,\n\u001b[0;32m   1068\u001b[0m         allow_nan\u001b[38;5;241m=\u001b[39mforce_all_finite \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mallow-nan\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m   1069\u001b[0m     )\n\u001b[0;32m   1071\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m copy:\n\u001b[0;32m   1072\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m _is_numpy_namespace(xp):\n\u001b[0;32m   1073\u001b[0m         \u001b[38;5;66;03m# only make a copy if `array` and `array_orig` may share memory`\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\utils\\validation.py:123\u001b[0m, in \u001b[0;36m_assert_all_finite\u001b[1;34m(X, allow_nan, msg_dtype, estimator_name, input_name)\u001b[0m\n\u001b[0;32m    120\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m first_pass_isfinite:\n\u001b[0;32m    121\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m\n\u001b[1;32m--> 123\u001b[0m _assert_all_finite_element_wise(\n\u001b[0;32m    124\u001b[0m     X,\n\u001b[0;32m    125\u001b[0m     xp\u001b[38;5;241m=\u001b[39mxp,\n\u001b[0;32m    126\u001b[0m     allow_nan\u001b[38;5;241m=\u001b[39mallow_nan,\n\u001b[0;32m    127\u001b[0m     msg_dtype\u001b[38;5;241m=\u001b[39mmsg_dtype,\n\u001b[0;32m    128\u001b[0m     estimator_name\u001b[38;5;241m=\u001b[39mestimator_name,\n\u001b[0;32m    129\u001b[0m     input_name\u001b[38;5;241m=\u001b[39minput_name,\n\u001b[0;32m    130\u001b[0m )\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\sklearn\\utils\\validation.py:172\u001b[0m, in \u001b[0;36m_assert_all_finite_element_wise\u001b[1;34m(X, xp, allow_nan, msg_dtype, estimator_name, input_name)\u001b[0m\n\u001b[0;32m    155\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m estimator_name \u001b[38;5;129;01mand\u001b[39;00m input_name \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mX\u001b[39m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;129;01mand\u001b[39;00m has_nan_error:\n\u001b[0;32m    156\u001b[0m     \u001b[38;5;66;03m# Improve the error message on how to handle missing values in\u001b[39;00m\n\u001b[0;32m    157\u001b[0m     \u001b[38;5;66;03m# scikit-learn.\u001b[39;00m\n\u001b[0;32m    158\u001b[0m     msg_err \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m    159\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{\u001b[39;00mestimator_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m does not accept missing values\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    160\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m encoded as NaN natively. For supervised learning, you might want\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    170\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m#estimators-that-handle-nan-values\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m    171\u001b[0m     )\n\u001b[1;32m--> 172\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg_err)\n",
      "\u001b[1;31mValueError\u001b[0m: Input y contains NaN."
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X = tweets_data['processed_text']  # Processed text data\n",
    "y = tweets_data['category']  # Sentiment category\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, random_state=42, stratify=y  # Stratify ensures balanced classes\n",
    ")\n",
    "print(f\"Training set size: {len(X_train)}\")\n",
    "print(f\"Testing set size: {len(X_test)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "81ccf8b4-2699-4fd3-8f9c-e6f39f0c42ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values after cleaning:\n",
      "clean_text        4\n",
      "category          0\n",
      "processed_text    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "tweets_data = tweets_data.dropna(subset=['processed_text', 'category'])\n",
    "print(\"Missing values after cleaning:\")\n",
    "print(tweets_data.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "00120c33-a1b4-4516-b7ed-3b0137a8b13f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set size: 130378\n",
      "Testing set size: 32595\n"
     ]
    }
   ],
   "source": [
    "X = tweets_data['processed_text']  # Processed text data\n",
    "y = tweets_data['category']  # Sentiment category\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.2, random_state=42, stratify=y  # Stratify ensures balanced classes\n",
    ")\n",
    "print(f\"Training set size: {len(X_train)}\")\n",
    "print(f\"Testing set size: {len(X_test)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "c16d9dbb-c79e-495f-a72d-a72e879d542d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "TF-IDF Training Set Shape: (130378, 5000)\n",
      "TF-IDF Testing Set Shape: (32595, 5000)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "tfidf_vectorizer = TfidfVectorizer(\n",
    "    max_features=5000,  # Limit to 5000 most important words\n",
    "    ngram_range=(1, 2)  # Unigrams and bigrams\n",
    ")\n",
    "X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\n",
    "X_test_tfidf = tfidf_vectorizer.transform(X_test)\n",
    "print(f\"TF-IDF Training Set Shape: {X_train_tfidf.shape}\")\n",
    "print(f\"TF-IDF Testing Set Shape: {X_test_tfidf.shape}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "f8a0d925-3b2a-466d-9c3b-0427dca23ee2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Classification Report:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "        -1.0       0.86      0.75      0.80      7102\n",
      "         0.0       0.84      0.96      0.89     11043\n",
      "         1.0       0.91      0.87      0.89     14450\n",
      "\n",
      "    accuracy                           0.87     32595\n",
      "   macro avg       0.87      0.86      0.86     32595\n",
      "weighted avg       0.87      0.87      0.87     32595\n",
      "\n",
      "Accuracy: 0.87\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import classification_report, accuracy_score\n",
    "classifier = LogisticRegression(max_iter=1000, random_state=42)\n",
    "classifier.fit(X_train_tfidf, y_train)\n",
    "y_pred = classifier.predict(X_test_tfidf)\n",
    "print(\"Classification Report:\")\n",
    "print(classification_report(y_test, y_pred))\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"Accuracy: {accuracy:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "93ed960d-a1f8-4470-8521-8b47f25bb824",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix:\n",
      " [[ 5292   881   929]\n",
      " [  186 10554   303]\n",
      " [  683  1158 12609]]\n",
      "\n",
      "Class-Level Accuracy:\n",
      "Negative: 0.75\n",
      "Neutral: 0.96\n",
      "Positive: 0.87\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',\n",
    "            xticklabels=['Negative (-1.0)', 'Neutral (0.0)', 'Positive (1.0)'],\n",
    "            yticklabels=['Negative (-1.0)', 'Neutral (0.0)', 'Positive (1.0)'])\n",
    "plt.title('Confusion Matrix', fontsize=14)\n",
    "plt.xlabel('Predicted Sentiments', fontsize=12)\n",
    "plt.ylabel('True Sentiments', fontsize=12)\n",
    "plt.show()\n",
    "print(\"Confusion Matrix:\\n\", conf_matrix)\n",
    "print(\"\\nClass-Level Accuracy:\")\n",
    "for i, sentiment in enumerate(['Negative', 'Neutral', 'Positive']):\n",
    "    accuracy = conf_matrix[i, i] / conf_matrix[i].sum()\n",
    "    print(f\"{sentiment}: {accuracy:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "238a3dce-df62-404f-b84d-fed9614842da",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "35608852-91a1-450d-8412-2da98806249e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 2 folds for each of 3 candidates, totalling 6 fits\n",
      "Best Parameters: {'C': 10, 'penalty': 'l2', 'solver': 'liblinear'}\n",
      "Best Cross-Validated Accuracy: 0.8675236619675099\n",
      "\n",
      "Classification Report for Tuned Model:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "        -1.0       0.86      0.77      0.81      7102\n",
      "         0.0       0.85      0.96      0.90     11043\n",
      "         1.0       0.92      0.88      0.90     14450\n",
      "\n",
      "    accuracy                           0.88     32595\n",
      "   macro avg       0.88      0.87      0.87     32595\n",
      "weighted avg       0.88      0.88      0.88     32595\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "# Optimize the parameter grid for faster tuning\n",
    "param_grid = {\n",
    "    'C': [0.1, 1, 10],  # Fewer values for regularization strength\n",
    "    'penalty': ['l2'],  # Focus on one penalty type\n",
    "    'solver': ['liblinear']  # Use one solver for efficiency\n",
    "}\n",
    "\n",
    "# Initialize Logistic Regression\n",
    "logreg = LogisticRegression(max_iter=1000, random_state=42)\n",
    "\n",
    "# Initialize GridSearchCV with fewer CV splits\n",
    "grid_search = GridSearchCV(logreg, param_grid, cv=2, scoring='accuracy', n_jobs=-1, verbose=2)\n",
    "\n",
    "# Fit GridSearchCV on a subset of the training data\n",
    "grid_search.fit(X_train_tfidf, y_train)\n",
    "\n",
    "# Output best parameters and cross-validation accuracy\n",
    "print(\"Best Parameters:\", grid_search.best_params_)\n",
    "print(\"Best Cross-Validated Accuracy:\", grid_search.best_score_)\n",
    "\n",
    "# Train the best model and evaluate\n",
    "best_logreg = grid_search.best_estimator_\n",
    "y_pred_best = best_logreg.predict(X_test_tfidf)\n",
    "\n",
    "# Print classification report for the tuned model\n",
    "from sklearn.metrics import classification_report\n",
    "print(\"\\nClassification Report for Tuned Model:\")\n",
    "print(classification_report(y_test, y_pred_best))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "03054bf6-ebb8-4342-843e-4d1ed381d4f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report for SVM Model:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "        -1.0       0.86      0.77      0.81      7102\n",
      "         0.0       0.85      0.96      0.90     11043\n",
      "         1.0       0.92      0.87      0.90     14450\n",
      "\n",
      "    accuracy                           0.88     32595\n",
      "   macro avg       0.88      0.87      0.87     32595\n",
      "weighted avg       0.88      0.88      0.88     32595\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import LinearSVC\n",
    "\n",
    "# Train an SVM model\n",
    "svm_model = LinearSVC(random_state=42)\n",
    "svm_model.fit(X_train_tfidf, y_train)\n",
    "\n",
    "# Predict using SVM\n",
    "y_pred_svm = svm_model.predict(X_test_tfidf)\n",
    "\n",
    "# Evaluate the SVM model\n",
    "print(\"\\nClassification Report for SVM Model:\")\n",
    "print(classification_report(y_test, y_pred_svm))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "f9c90794-f056-481e-9845-a15651fd703e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report for Naive Bayes Model:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "        -1.0       0.82      0.47      0.60      7102\n",
      "         0.0       0.80      0.69      0.74     11043\n",
      "         1.0       0.68      0.89      0.77     14450\n",
      "\n",
      "    accuracy                           0.73     32595\n",
      "   macro avg       0.77      0.68      0.70     32595\n",
      "weighted avg       0.75      0.73      0.72     32595\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB\n",
    "\n",
    "# Train a Naive Bayes model\n",
    "nb_model = MultinomialNB()\n",
    "nb_model.fit(X_train_tfidf, y_train)\n",
    "\n",
    "# Predict using Naive Bayes\n",
    "y_pred_nb = nb_model.predict(X_test_tfidf)\n",
    "\n",
    "# Evaluate the Naive Bayes model\n",
    "print(\"\\nClassification Report for Naive Bayes Model:\")\n",
    "print(classification_report(y_test, y_pred_nb))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "9067b941-a180-47d0-b507-ff2a2a79df03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report for Balanced Logistic Regression:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "        -1.0       0.80      0.81      0.80      7102\n",
      "         0.0       0.84      0.95      0.89     11043\n",
      "         1.0       0.94      0.83      0.88     14450\n",
      "\n",
      "    accuracy                           0.87     32595\n",
      "   macro avg       0.86      0.87      0.86     32595\n",
      "weighted avg       0.88      0.87      0.87     32595\n",
      "\n",
      "\n",
      "Classification Report for SMOTE Logistic Regression:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "        -1.0       0.77      0.76      0.77      7102\n",
      "         0.0       0.83      0.92      0.88     11043\n",
      "         1.0       0.92      0.85      0.88     14450\n",
      "\n",
      "    accuracy                           0.86     32595\n",
      "   macro avg       0.84      0.85      0.84     32595\n",
      "weighted avg       0.86      0.86      0.86     32595\n",
      "\n"
     ]
    }
   ],
   "source": [
    "balanced_logreg = LogisticRegression(max_iter=1000, class_weight='balanced', random_state=42)\n",
    "balanced_logreg.fit(X_train_tfidf, y_train)\n",
    "y_pred_balanced = balanced_logreg.predict(X_test_tfidf)\n",
    "print(\"\\nClassification Report for Balanced Logistic Regression:\")\n",
    "print(classification_report(y_test, y_pred_balanced))\n",
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "smote = SMOTE(random_state=42)\n",
    "X_train_resampled, y_train_resampled = smote.fit_resample(X_train_tfidf, y_train)\n",
    "\n",
    "# Train Logistic Regression on resampled data\n",
    "smote_logreg = LogisticRegression(max_iter=1000, random_state=42)\n",
    "smote_logreg.fit(X_train_resampled, y_train_resampled)\n",
    "y_pred_smote = smote_logreg.predict(X_test_tfidf)\n",
    "\n",
    "print(\"\\nClassification Report for SMOTE Logistic Regression:\")\n",
    "print(classification_report(y_test, y_pred_smote))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "394b1526-acb8-4283-9716-2cbd89da23d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Classification Report for Ensemble Model:\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "        -1.0       0.86      0.77      0.81      7102\n",
      "         0.0       0.85      0.96      0.90     11043\n",
      "         1.0       0.92      0.88      0.90     14450\n",
      "\n",
      "    accuracy                           0.88     32595\n",
      "   macro avg       0.88      0.87      0.87     32595\n",
      "weighted avg       0.88      0.88      0.88     32595\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import VotingClassifier\n",
    "\n",
    "# Create an ensemble of Logistic Regression, SVM, and Naive Bayes\n",
    "ensemble_model = VotingClassifier(estimators=[\n",
    "    ('logreg', best_logreg),\n",
    "    ('svm', svm_model),\n",
    "    ('nb', nb_model)\n",
    "], voting='hard')\n",
    "\n",
    "# Train and predict with the ensemble model\n",
    "ensemble_model.fit(X_train_tfidf, y_train)\n",
    "y_pred_ensemble = ensemble_model.predict(X_test_tfidf)\n",
    "\n",
    "print(\"\\nClassification Report for Ensemble Model:\")\n",
    "print(classification_report(y_test, y_pred_ensemble))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "b8b1c480-3664-413f-93a5-e851124a9b6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Import necessary libraries\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Generate the confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred_best)\n",
    "\n",
    "# Plot the confusion matrix\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',\n",
    "            xticklabels=['Negative', 'Neutral', 'Positive'],\n",
    "            yticklabels=['Negative', 'Neutral', 'Positive'])\n",
    "plt.title('Confusion Matrix', fontsize=14)\n",
    "plt.xlabel('Predicted Labels', fontsize=12)\n",
    "plt.ylabel('True Labels', fontsize=12)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "0aa39514-ae1e-4f76-922e-71d20e94f5c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\pauline\\AppData\\Local\\Temp\\ipykernel_23228\\3692937839.py:2: FutureWarning: \n",
      "\n",
      "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
      "\n",
      "  sns.countplot(x=y_pred_best, palette='viridis')\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize the predicted sentiment distribution\n",
    "sns.countplot(x=y_pred_best, palette='viridis')\n",
    "plt.title('Distribution of Predicted Sentiments', fontsize=14)\n",
    "plt.xlabel('Sentiment Class', fontsize=12)\n",
    "plt.ylabel('Count', fontsize=12)\n",
    "plt.xticks(ticks=[0, 1, 2], labels=['Negative', 'Neutral', 'Positive'])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "622f9edf-2dfa-4c00-8b30-833cb478c6a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import precision_recall_fscore_support\n",
    "\n",
    "# Calculate metrics for each class\n",
    "precision, recall, f1, _ = precision_recall_fscore_support(y_test, y_pred_best, average=None)\n",
    "\n",
    "# Create a dataframe for visualization\n",
    "import pandas as pd\n",
    "metrics_df = pd.DataFrame({\n",
    "    'Class': ['Negative', 'Neutral', 'Positive'],\n",
    "    'Precision': precision,\n",
    "    'Recall': recall,\n",
    "    'F1-Score': f1\n",
    "})\n",
    "\n",
    "# Plot precision, recall, and F1-score\n",
    "metrics_df.plot(x='Class', kind='bar', figsize=(8, 6), rot=0)\n",
    "plt.title('Precision, Recall, and F1-Score by Class', fontsize=14)\n",
    "plt.ylabel('Score', fontsize=12)\n",
    "plt.xlabel('Sentiment Class', fontsize=12)\n",
    "plt.ylim(0, 1)  # Scores range from 0 to 1\n",
    "plt.legend(loc='lower right')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "a0907cbe-8750-4252-aca9-5fdd71f2fcd6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved as logistic_regression_model.pkl\n",
      "TF-IDF Vectorizer saved as tfidf_vectorizer.pkl\n"
     ]
    }
   ],
   "source": [
    "import pickle\n",
    "\n",
    "# Save the trained Logistic Regression model\n",
    "model_filename = 'logistic_regression_model.pkl'\n",
    "with open(model_filename, 'wb') as model_file:\n",
    "    pickle.dump(best_logreg, model_file)\n",
    "print(f\"Model saved as {model_filename}\")\n",
    "\n",
    "# Save the TF-IDF vectorizer\n",
    "vectorizer_filename = 'tfidf_vectorizer.pkl'\n",
    "with open(vectorizer_filename, 'wb') as vectorizer_file:\n",
    "    pickle.dump(tfidf_vectorizer, vectorizer_file)\n",
    "print(f\"TF-IDF Vectorizer saved as {vectorizer_filename}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "46669cfd-7a85-4fc0-9f24-3387766a3076",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predictions for test text: [ 1. -1.  1.]\n"
     ]
    }
   ],
   "source": [
    "# Load the saved model\n",
    "with open(model_filename, 'rb') as model_file:\n",
    "    loaded_model = pickle.load(model_file)\n",
    "\n",
    "# Load the saved vectorizer\n",
    "with open(vectorizer_filename, 'rb') as vectorizer_file:\n",
    "    loaded_vectorizer = pickle.load(vectorizer_file)\n",
    "\n",
    "# Test the loaded model with new data\n",
    "test_text = [\"The product was fantastic!\", \"This is a bad experience.\", \"It's okay, not great.\"]\n",
    "test_text_tfidf = loaded_vectorizer.transform(test_text)\n",
    "predictions = loaded_model.predict(test_text_tfidf)\n",
    "\n",
    "# Display predictions\n",
    "print(\"Predictions for test text:\", predictions)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "4987266f-9837-4c2a-b4d1-103d9e711065",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predictions for test text: [-1.  1.  1.  0.]\n"
     ]
    }
   ],
   "source": [
    "test_text = [\n",
    "    \"It's an average product.\",\n",
    "    \"I don't have strong feelings about it.\",\n",
    "    \"The movie was just okay, nothing special.\",\n",
    "    \"No opinion here.\"\n",
    "]\n",
    "\n",
    "# Transform the test text with the saved vectorizer\n",
    "test_text_tfidf = loaded_vectorizer.transform(test_text)\n",
    "\n",
    "# Predict sentiments\n",
    "predictions = loaded_model.predict(test_text_tfidf)\n",
    "\n",
    "# Display predictions\n",
    "print(\"Predictions for test text:\", predictions)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "29064678-1ab1-442e-b7c0-9d78ae676898",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
